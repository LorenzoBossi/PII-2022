-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tensor_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tensor_ce0 : OUT STD_LOGIC;
    tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tensor_ce1 : OUT STD_LOGIC;
    tensor_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of CNN is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "CNN_CNN,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7z030-fbg484-1I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.877400,HLS_SYN_LAT=28680,HLS_SYN_TPT=none,HLS_SYN_MEM=24,HLS_SYN_DSP=0,HLS_SYN_FF=64577,HLS_SYN_LUT=51468,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_396 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_396_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state75_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state76_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state77_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state78_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state79_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state80_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state81_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state82_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_reg_396_pp1_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_396_pp1_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_396_pp1_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_396_pp1_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_396_pp1_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_408 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_419 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_419_pp2_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state84_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state85_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state86_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state87_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state88_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state89_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state90_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state91_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_2_reg_419_pp2_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_419_pp2_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_419_pp2_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_419_pp2_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_419_pp2_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_431 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_453 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_453_pp4_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state128_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state130_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal maxi_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state47_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln60_reg_969 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state129_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state131_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal icmp_ln180_reg_1110 : STD_LOGIC_VECTOR (0 downto 0);
    signal singleElement_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal icmp_ln65_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state104_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state105_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state106_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state107_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state108_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state109_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state110_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_state111_pp3_stage0_iter7 : BOOLEAN;
    signal ap_block_state112_pp3_stage0_iter8 : BOOLEAN;
    signal ap_block_state113_pp3_stage0_iter9 : BOOLEAN;
    signal ap_block_state114_pp3_stage0_iter10 : BOOLEAN;
    signal ap_block_state115_pp3_stage0_iter11 : BOOLEAN;
    signal ap_block_state116_pp3_stage0_iter12 : BOOLEAN;
    signal ap_block_state117_pp3_stage0_iter13 : BOOLEAN;
    signal ap_block_state118_pp3_stage0_iter14 : BOOLEAN;
    signal ap_block_state119_pp3_stage0_iter15 : BOOLEAN;
    signal ap_block_state120_pp3_stage0_iter16 : BOOLEAN;
    signal ap_block_state121_pp3_stage0_iter17 : BOOLEAN;
    signal ap_block_state122_pp3_stage0_iter18 : BOOLEAN;
    signal ap_block_state123_pp3_stage0_iter19 : BOOLEAN;
    signal ap_block_state124_pp3_stage0_iter20 : BOOLEAN;
    signal ap_block_state125_pp3_stage0_iter21 : BOOLEAN;
    signal ap_block_state126_pp3_stage0_iter22 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal singleElement_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal icmp_ln65_reg_1003_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal icmp_ln70_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tempsum1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tempsum1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln60_fu_729_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln60_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_reg_969_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_973_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_696_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_988 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln65_fu_746_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln65_reg_998 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln65_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1003_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_1_fu_774_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal singleElement_load_1_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln70_fu_785_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln70_reg_1027 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln70_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1032_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_1_fu_817_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempsum1_load_2_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal tempsum2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempsum2_load_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal tempsum2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempsum2_load_1_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal add_ln78_fu_828_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln78_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_1086_pp3_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast_reg_1090_pp3_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln180_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln180_reg_1110_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln180_fu_856_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln180_reg_1119 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln182_2_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_2_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_3_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_3_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_2_fu_944_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal maxi_2_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_update_result_fu_654_ap_ready : STD_LOGIC;
    signal grp_update_result_fu_654_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state47 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state75 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state84 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state104 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter22 : STD_LOGIC := '0';
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_condition_pp4_flush_enable : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_ce0 : STD_LOGIC;
    signal result_we0 : STD_LOGIC;
    signal result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_ce1 : STD_LOGIC;
    signal result_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempConvoluted_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tempConvoluted_ce0 : STD_LOGIC;
    signal tempConvoluted_we0 : STD_LOGIC;
    signal tempConvoluted_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempConvoluted_ce1 : STD_LOGIC;
    signal tempConvoluted_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMaxPooled_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tempMaxPooled_ce0 : STD_LOGIC;
    signal tempMaxPooled_we0 : STD_LOGIC;
    signal tempMaxPooled_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMaxPooled_ce1 : STD_LOGIC;
    signal tempMaxPooled_we1 : STD_LOGIC;
    signal tempMaxPooled_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal fc_ce0 : STD_LOGIC;
    signal fc_we0 : STD_LOGIC;
    signal fc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc_ce1 : STD_LOGIC;
    signal fc_we1 : STD_LOGIC;
    signal fc_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_ce0 : STD_LOGIC;
    signal input_we0 : STD_LOGIC;
    signal input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_ce1 : STD_LOGIC;
    signal input_we1 : STD_LOGIC;
    signal input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempsum1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempsum1_ce0 : STD_LOGIC;
    signal tempsum1_we0 : STD_LOGIC;
    signal tempsum1_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempsum1_ce1 : STD_LOGIC;
    signal tempsum2_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempsum2_ce0 : STD_LOGIC;
    signal tempsum2_we0 : STD_LOGIC;
    signal tempsum2_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempsum2_ce1 : STD_LOGIC;
    signal singleElement_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal singleElement_ce0 : STD_LOGIC;
    signal singleElement_we0 : STD_LOGIC;
    signal singleElement_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal singleElement_ce1 : STD_LOGIC;
    signal grp_Convolution_fu_489_ap_start : STD_LOGIC;
    signal grp_Convolution_fu_489_ap_done : STD_LOGIC;
    signal grp_Convolution_fu_489_ap_idle : STD_LOGIC;
    signal grp_Convolution_fu_489_ap_ready : STD_LOGIC;
    signal grp_Convolution_fu_489_tensor_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Convolution_fu_489_tensor_ce0 : STD_LOGIC;
    signal grp_Convolution_fu_489_tensor_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Convolution_fu_489_tensor_ce1 : STD_LOGIC;
    signal grp_Convolution_fu_489_kernelNumber : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Convolution_fu_489_convoluted_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Convolution_fu_489_convoluted_ce0 : STD_LOGIC;
    signal grp_Convolution_fu_489_convoluted_we0 : STD_LOGIC;
    signal grp_Convolution_fu_489_convoluted_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_tensor_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_init_1_fu_606_tensor_ce0 : STD_LOGIC;
    signal grp_init_1_fu_606_tensor_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_tensor_we0 : STD_LOGIC;
    signal grp_init_1_fu_606_tensor_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_init_1_fu_606_tensor_ce1 : STD_LOGIC;
    signal grp_init_1_fu_606_tensor_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_tensor_we1 : STD_LOGIC;
    signal grp_init_1_fu_606_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_init_1_fu_606_result_ce0 : STD_LOGIC;
    signal grp_init_1_fu_606_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_result_we0 : STD_LOGIC;
    signal grp_init_1_fu_606_result_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_init_1_fu_606_result_ce1 : STD_LOGIC;
    signal grp_init_1_fu_606_result_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_result_we1 : STD_LOGIC;
    signal grp_init_1_fu_606_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_init_1_fu_606_input_r_ce0 : STD_LOGIC;
    signal grp_init_1_fu_606_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_input_r_we0 : STD_LOGIC;
    signal grp_init_1_fu_606_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_init_1_fu_606_input_r_ce1 : STD_LOGIC;
    signal grp_init_1_fu_606_input_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_1_fu_606_input_r_we1 : STD_LOGIC;
    signal grp_init_1_fu_606_ap_start : STD_LOGIC;
    signal grp_init_1_fu_606_ap_done : STD_LOGIC;
    signal grp_init_1_fu_606_ap_ready : STD_LOGIC;
    signal grp_init_1_fu_606_ap_idle : STD_LOGIC;
    signal grp_init_1_fu_606_ap_continue : STD_LOGIC;
    signal grp_pool_fu_618_ap_start : STD_LOGIC;
    signal grp_pool_fu_618_ap_done : STD_LOGIC;
    signal grp_pool_fu_618_ap_idle : STD_LOGIC;
    signal grp_pool_fu_618_ap_ready : STD_LOGIC;
    signal grp_pool_fu_618_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pool_fu_618_input_r_ce0 : STD_LOGIC;
    signal grp_pool_fu_618_input_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pool_fu_618_input_r_ce1 : STD_LOGIC;
    signal grp_pool_fu_618_buffer_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pool_fu_618_buffer_r_ce0 : STD_LOGIC;
    signal grp_pool_fu_618_buffer_r_we0 : STD_LOGIC;
    signal grp_pool_fu_618_buffer_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pool_fu_618_buffer_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pool_fu_618_buffer_r_ce1 : STD_LOGIC;
    signal grp_pool_fu_618_buffer_r_we1 : STD_LOGIC;
    signal grp_pool_fu_618_buffer_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FullyConnected_fu_624_ap_start : STD_LOGIC;
    signal grp_FullyConnected_fu_624_ap_done : STD_LOGIC;
    signal grp_FullyConnected_fu_624_ap_idle : STD_LOGIC;
    signal grp_FullyConnected_fu_624_ap_ready : STD_LOGIC;
    signal grp_FullyConnected_fu_624_tensor_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FullyConnected_fu_624_tensor_ce0 : STD_LOGIC;
    signal grp_FullyConnected_fu_624_nKernel : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FullyConnected_fu_624_result_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_FullyConnected_fu_624_result_ce0 : STD_LOGIC;
    signal grp_FullyConnected_fu_624_result_we0 : STD_LOGIC;
    signal grp_FullyConnected_fu_624_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FullyConnected_fu_624_result_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_FullyConnected_fu_624_result_ce1 : STD_LOGIC;
    signal grp_FullyConnected_fu_624_result_we1 : STD_LOGIC;
    signal grp_FullyConnected_fu_624_result_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FullyConnected_fu_624_result_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_result_fu_654_ap_start : STD_LOGIC;
    signal grp_update_result_fu_654_ap_idle : STD_LOGIC;
    signal grp_update_result_fu_654_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_result_fu_654_result_ce0 : STD_LOGIC;
    signal grp_update_result_fu_654_result_we0 : STD_LOGIC;
    signal grp_update_result_fu_654_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_update_result_fu_654_result_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_update_result_fu_654_result_ce1 : STD_LOGIC;
    signal grp_update_result_fu_654_fc_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_update_result_fu_654_fc_ce0 : STD_LOGIC;
    signal grp_update_result_fu_654_fc_offset : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_1_phi_fu_400_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_423_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_i_5_phi_fu_457_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal grp_Convolution_fu_489_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_init_1_fu_606_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_init_1_fu_606_ap_ready : STD_LOGIC;
    signal ap_sync_grp_init_1_fu_606_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_init_1_fu_606_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_init_1_fu_606_ap_done : STD_LOGIC := '0';
    signal grp_pool_fu_618_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_FullyConnected_fu_624_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_update_result_fu_654_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal j_cast_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_cast1_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln180_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_671_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal or_ln66_fu_763_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_88_fu_802_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln71_fu_806_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal bitcast_ln182_1_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_230_fu_866_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln182_1_fu_876_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln182_fu_892_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_896_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln182_fu_906_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln182_1_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln182_fu_922_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln182_1_fu_928_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_1_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln182_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal ap_block_state24_on_subcall_done : BOOLEAN;
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal ap_block_state28_on_subcall_done : BOOLEAN;
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal ap_block_state32_on_subcall_done : BOOLEAN;
    signal ap_block_state34_on_subcall_done : BOOLEAN;
    signal ap_block_state36_on_subcall_done : BOOLEAN;
    signal ap_block_state38_on_subcall_done : BOOLEAN;
    signal ap_block_state40_on_subcall_done : BOOLEAN;
    signal ap_block_state42_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_Convolution IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce0 : OUT STD_LOGIC;
        tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce1 : OUT STD_LOGIC;
        tensor_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernelNumber : IN STD_LOGIC_VECTOR (3 downto 0);
        convoluted_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        convoluted_ce0 : OUT STD_LOGIC;
        convoluted_we0 : OUT STD_LOGIC;
        convoluted_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_init_1 IS
    port (
        tensor_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce0 : OUT STD_LOGIC;
        tensor_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_we0 : OUT STD_LOGIC;
        tensor_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce1 : OUT STD_LOGIC;
        tensor_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tensor_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_we1 : OUT STD_LOGIC;
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_we0 : OUT STD_LOGIC;
        result_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce1 : OUT STD_LOGIC;
        result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_we1 : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we0 : OUT STD_LOGIC;
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component CNN_pool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_we0 : OUT STD_LOGIC;
        buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_we1 : OUT STD_LOGIC;
        buffer_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_FullyConnected IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        tensor_ce0 : OUT STD_LOGIC;
        tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nKernel : IN STD_LOGIC_VECTOR (3 downto 0);
        result_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_ce1 : OUT STD_LOGIC;
        result_we1 : OUT STD_LOGIC;
        result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_update_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce1 : OUT STD_LOGIC;
        result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fc_ce0 : OUT STD_LOGIC;
        fc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_dexp_64ns_64ns_64_21_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component CNN_result IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_tempConvoluted IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_tempMaxPooled IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_tempsum1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_tempsum2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_singleElement IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    result_U : component CNN_result
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_address0,
        ce0 => result_ce0,
        we0 => result_we0,
        d0 => result_d0,
        q0 => result_q0,
        address1 => grp_update_result_fu_654_result_address1,
        ce1 => result_ce1,
        q1 => result_q1);

    tempConvoluted_U : component CNN_tempConvoluted
    generic map (
        DataWidth => 32,
        AddressRange => 484,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempConvoluted_address0,
        ce0 => tempConvoluted_ce0,
        we0 => tempConvoluted_we0,
        d0 => grp_Convolution_fu_489_convoluted_d0,
        q0 => tempConvoluted_q0,
        address1 => grp_pool_fu_618_input_r_address1,
        ce1 => tempConvoluted_ce1,
        q1 => tempConvoluted_q1);

    tempMaxPooled_U : component CNN_tempMaxPooled
    generic map (
        DataWidth => 32,
        AddressRange => 49,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempMaxPooled_address0,
        ce0 => tempMaxPooled_ce0,
        we0 => tempMaxPooled_we0,
        d0 => grp_pool_fu_618_buffer_r_d0,
        q0 => tempMaxPooled_q0,
        address1 => grp_pool_fu_618_buffer_r_address1,
        ce1 => tempMaxPooled_ce1,
        we1 => tempMaxPooled_we1,
        d1 => grp_pool_fu_618_buffer_r_d1,
        q1 => tempMaxPooled_q1);

    fc_U : component CNN_fc
    generic map (
        DataWidth => 32,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_address0,
        ce0 => fc_ce0,
        we0 => fc_we0,
        d0 => grp_FullyConnected_fu_624_result_d0,
        q0 => fc_q0,
        address1 => grp_FullyConnected_fu_624_result_address1,
        ce1 => fc_ce1,
        we1 => fc_we1,
        d1 => grp_FullyConnected_fu_624_result_d1,
        q1 => fc_q1);

    input_U : component CNN_input
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_address0,
        ce0 => input_ce0,
        we0 => input_we0,
        d0 => grp_init_1_fu_606_input_r_d0,
        q0 => input_q0,
        address1 => input_address1,
        ce1 => input_ce1,
        we1 => input_we1,
        d1 => grp_init_1_fu_606_input_r_d1,
        q1 => input_q1);

    tempsum1_U : component CNN_tempsum1
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempsum1_address0,
        ce0 => tempsum1_ce0,
        we0 => tempsum1_we0,
        d0 => reg_714,
        q0 => tempsum1_q0,
        address1 => tempsum1_address1,
        ce1 => tempsum1_ce1,
        q1 => tempsum1_q1);

    tempsum2_U : component CNN_tempsum2
    generic map (
        DataWidth => 32,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempsum2_address0,
        ce0 => tempsum2_ce0,
        we0 => tempsum2_we0,
        d0 => reg_714,
        q0 => tempsum2_q0,
        address1 => tempsum2_address1,
        ce1 => tempsum2_ce1,
        q1 => tempsum2_q1);

    singleElement_U : component CNN_singleElement
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => singleElement_address0,
        ce0 => singleElement_ce0,
        we0 => singleElement_we0,
        d0 => conv1_reg_993,
        q0 => singleElement_q0,
        address1 => singleElement_address1,
        ce1 => singleElement_ce1,
        q1 => singleElement_q1);

    grp_Convolution_fu_489 : component CNN_Convolution
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Convolution_fu_489_ap_start,
        ap_done => grp_Convolution_fu_489_ap_done,
        ap_idle => grp_Convolution_fu_489_ap_idle,
        ap_ready => grp_Convolution_fu_489_ap_ready,
        tensor_address0 => grp_Convolution_fu_489_tensor_address0,
        tensor_ce0 => grp_Convolution_fu_489_tensor_ce0,
        tensor_q0 => input_q0,
        tensor_address1 => grp_Convolution_fu_489_tensor_address1,
        tensor_ce1 => grp_Convolution_fu_489_tensor_ce1,
        tensor_q1 => input_q1,
        kernelNumber => grp_Convolution_fu_489_kernelNumber,
        convoluted_address0 => grp_Convolution_fu_489_convoluted_address0,
        convoluted_ce0 => grp_Convolution_fu_489_convoluted_ce0,
        convoluted_we0 => grp_Convolution_fu_489_convoluted_we0,
        convoluted_d0 => grp_Convolution_fu_489_convoluted_d0);

    grp_init_1_fu_606 : component CNN_init_1
    port map (
        tensor_address0 => grp_init_1_fu_606_tensor_address0,
        tensor_ce0 => grp_init_1_fu_606_tensor_ce0,
        tensor_d0 => grp_init_1_fu_606_tensor_d0,
        tensor_q0 => tensor_q0,
        tensor_we0 => grp_init_1_fu_606_tensor_we0,
        tensor_address1 => grp_init_1_fu_606_tensor_address1,
        tensor_ce1 => grp_init_1_fu_606_tensor_ce1,
        tensor_d1 => grp_init_1_fu_606_tensor_d1,
        tensor_q1 => tensor_q1,
        tensor_we1 => grp_init_1_fu_606_tensor_we1,
        result_address0 => grp_init_1_fu_606_result_address0,
        result_ce0 => grp_init_1_fu_606_result_ce0,
        result_d0 => grp_init_1_fu_606_result_d0,
        result_q0 => ap_const_lv32_0,
        result_we0 => grp_init_1_fu_606_result_we0,
        result_address1 => grp_init_1_fu_606_result_address1,
        result_ce1 => grp_init_1_fu_606_result_ce1,
        result_d1 => grp_init_1_fu_606_result_d1,
        result_q1 => ap_const_lv32_0,
        result_we1 => grp_init_1_fu_606_result_we1,
        input_r_address0 => grp_init_1_fu_606_input_r_address0,
        input_r_ce0 => grp_init_1_fu_606_input_r_ce0,
        input_r_d0 => grp_init_1_fu_606_input_r_d0,
        input_r_q0 => ap_const_lv32_0,
        input_r_we0 => grp_init_1_fu_606_input_r_we0,
        input_r_address1 => grp_init_1_fu_606_input_r_address1,
        input_r_ce1 => grp_init_1_fu_606_input_r_ce1,
        input_r_d1 => grp_init_1_fu_606_input_r_d1,
        input_r_q1 => ap_const_lv32_0,
        input_r_we1 => grp_init_1_fu_606_input_r_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_1_fu_606_ap_start,
        ap_done => grp_init_1_fu_606_ap_done,
        ap_ready => grp_init_1_fu_606_ap_ready,
        ap_idle => grp_init_1_fu_606_ap_idle,
        ap_continue => grp_init_1_fu_606_ap_continue);

    grp_pool_fu_618 : component CNN_pool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pool_fu_618_ap_start,
        ap_done => grp_pool_fu_618_ap_done,
        ap_idle => grp_pool_fu_618_ap_idle,
        ap_ready => grp_pool_fu_618_ap_ready,
        input_r_address0 => grp_pool_fu_618_input_r_address0,
        input_r_ce0 => grp_pool_fu_618_input_r_ce0,
        input_r_q0 => tempConvoluted_q0,
        input_r_address1 => grp_pool_fu_618_input_r_address1,
        input_r_ce1 => grp_pool_fu_618_input_r_ce1,
        input_r_q1 => tempConvoluted_q1,
        buffer_r_address0 => grp_pool_fu_618_buffer_r_address0,
        buffer_r_ce0 => grp_pool_fu_618_buffer_r_ce0,
        buffer_r_we0 => grp_pool_fu_618_buffer_r_we0,
        buffer_r_d0 => grp_pool_fu_618_buffer_r_d0,
        buffer_r_q0 => tempMaxPooled_q0,
        buffer_r_address1 => grp_pool_fu_618_buffer_r_address1,
        buffer_r_ce1 => grp_pool_fu_618_buffer_r_ce1,
        buffer_r_we1 => grp_pool_fu_618_buffer_r_we1,
        buffer_r_d1 => grp_pool_fu_618_buffer_r_d1,
        buffer_r_q1 => tempMaxPooled_q1);

    grp_FullyConnected_fu_624 : component CNN_FullyConnected
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FullyConnected_fu_624_ap_start,
        ap_done => grp_FullyConnected_fu_624_ap_done,
        ap_idle => grp_FullyConnected_fu_624_ap_idle,
        ap_ready => grp_FullyConnected_fu_624_ap_ready,
        tensor_address0 => grp_FullyConnected_fu_624_tensor_address0,
        tensor_ce0 => grp_FullyConnected_fu_624_tensor_ce0,
        tensor_q0 => tempMaxPooled_q0,
        nKernel => grp_FullyConnected_fu_624_nKernel,
        result_address0 => grp_FullyConnected_fu_624_result_address0,
        result_ce0 => grp_FullyConnected_fu_624_result_ce0,
        result_we0 => grp_FullyConnected_fu_624_result_we0,
        result_d0 => grp_FullyConnected_fu_624_result_d0,
        result_q0 => fc_q0,
        result_address1 => grp_FullyConnected_fu_624_result_address1,
        result_ce1 => grp_FullyConnected_fu_624_result_ce1,
        result_we1 => grp_FullyConnected_fu_624_result_we1,
        result_d1 => grp_FullyConnected_fu_624_result_d1,
        result_q1 => fc_q1,
        result_offset => grp_FullyConnected_fu_624_result_offset);

    grp_update_result_fu_654 : component CNN_update_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_result_fu_654_ap_start,
        ap_done => grp_update_result_fu_654_ap_done,
        ap_idle => grp_update_result_fu_654_ap_idle,
        ap_ready => grp_update_result_fu_654_ap_ready,
        result_address0 => grp_update_result_fu_654_result_address0,
        result_ce0 => grp_update_result_fu_654_result_ce0,
        result_we0 => grp_update_result_fu_654_result_we0,
        result_d0 => grp_update_result_fu_654_result_d0,
        result_address1 => grp_update_result_fu_654_result_address1,
        result_ce1 => grp_update_result_fu_654_result_ce1,
        result_q1 => result_q1,
        fc_address0 => grp_update_result_fu_654_fc_address0,
        fc_ce0 => grp_update_result_fu_654_fc_ce0,
        fc_q0 => fc_q0,
        fc_offset => grp_update_result_fu_654_fc_offset);

    fadd_32ns_32ns_32_5_full_dsp_1_U107 : component CNN_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_671_p0,
        din1 => grp_fu_671_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_671_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U108 : component CNN_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_707,
        din1 => ap_const_lv32_42C80000,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U109 : component CNN_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1100,
        din1 => reg_714,
        ce => ap_const_logic_1,
        dout => grp_fu_680_p2);

    fptrunc_64ns_32_2_no_dsp_1_U110 : component CNN_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_988,
        ce => ap_const_logic_1,
        dout => grp_fu_684_p1);

    fpext_32ns_64_2_no_dsp_1_U111 : component CNN_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => result_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U112 : component CNN_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_701,
        din1 => max_reg_477,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_691_p2);

    dexp_64ns_64ns_64_21_full_dsp_1_U113 : component CNN_dexp_64ns_64ns_64_21_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => conv_reg_983,
        ce => ap_const_logic_1,
        dout => grp_fu_696_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_update_result_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state47)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state47);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif (((grp_update_result_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state75) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state75)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state75);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state84) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state84)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state84);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state104) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state104)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state104);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter10 <= ap_enable_reg_pp3_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter11 <= ap_enable_reg_pp3_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter12 <= ap_enable_reg_pp3_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter13 <= ap_enable_reg_pp3_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter14 <= ap_enable_reg_pp3_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter15 <= ap_enable_reg_pp3_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter16 <= ap_enable_reg_pp3_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter17 <= ap_enable_reg_pp3_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter18 <= ap_enable_reg_pp3_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter19 <= ap_enable_reg_pp3_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter20 <= ap_enable_reg_pp3_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter21 <= ap_enable_reg_pp3_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter22 <= ap_enable_reg_pp3_iter21;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                    ap_enable_reg_pp3_iter22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter7 <= ap_enable_reg_pp3_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter8 <= ap_enable_reg_pp3_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter9 <= ap_enable_reg_pp3_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp4_flush_enable)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone)))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_init_1_fu_606_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_init_1_fu_606_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_init_1_fu_606_ap_done <= ap_const_logic_0;
                elsif ((grp_init_1_fu_606_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_init_1_fu_606_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_init_1_fu_606_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_init_1_fu_606_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_init_1_fu_606_ap_ready <= ap_const_logic_0;
                elsif ((grp_init_1_fu_606_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_init_1_fu_606_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Convolution_fu_489_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Convolution_fu_489_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_Convolution_fu_489_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Convolution_fu_489_ap_ready = ap_const_logic_1)) then 
                    grp_Convolution_fu_489_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FullyConnected_fu_624_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FullyConnected_fu_624_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_FullyConnected_fu_624_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FullyConnected_fu_624_ap_ready = ap_const_logic_1)) then 
                    grp_FullyConnected_fu_624_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_init_1_fu_606_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_1_fu_606_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sync_grp_init_1_fu_606_ap_ready = ap_const_logic_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_init_1_fu_606_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_1_fu_606_ap_ready = ap_const_logic_1)) then 
                    grp_init_1_fu_606_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pool_fu_618_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pool_fu_618_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_pool_fu_618_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pool_fu_618_ap_ready = ap_const_logic_1)) then 
                    grp_pool_fu_618_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_update_result_fu_654_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_result_fu_654_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_update_result_fu_654_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_result_fu_654_ap_ready = ap_const_logic_1)) then 
                    grp_update_result_fu_654_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                i_1_reg_396 <= ap_const_lv3_0;
            elsif (((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_396 <= add_ln65_reg_998;
            end if; 
        end if;
    end process;

    i_2_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                i_2_reg_419 <= ap_const_lv2_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1032 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_419 <= add_ln70_reg_1027;
            end if; 
        end if;
    end process;

    i_3_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
                i_3_reg_442 <= ap_const_lv4_0;
            elsif (((icmp_ln78_fu_834_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_3_reg_442 <= add_ln78_fu_828_p2;
            end if; 
        end if;
    end process;

    i_5_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                i_5_reg_453 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln180_reg_1110 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_5_reg_453 <= add_ln180_reg_1119;
            end if; 
        end if;
    end process;

    i_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_update_result_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                i_reg_385 <= ap_const_lv4_0;
            elsif (((icmp_ln60_fu_735_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_385 <= add_ln60_fu_729_p2;
            end if; 
        end if;
    end process;

    j_1_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                j_1_reg_431 <= ap_const_lv3_0;
            elsif (((icmp_ln70_fu_791_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j_1_reg_431 <= add_ln70_1_fu_817_p2;
            end if; 
        end if;
    end process;

    j_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                j_reg_408 <= ap_const_lv4_0;
            elsif (((icmp_ln65_fu_752_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                j_reg_408 <= add_ln65_1_fu_774_p2;
            end if; 
        end if;
    end process;

    max_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                max_reg_477 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln180_reg_1110_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then 
                max_reg_477 <= max_2_fu_944_p3;
            end if; 
        end if;
    end process;

    reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_1086 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                reg_707 <= singleElement_q0;
            elsif (((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                reg_707 <= singleElement_q1;
            end if; 
        end if;
    end process;

    reg_722_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                reg_722 <= tempsum1_q0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1032 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                reg_722 <= tempsum1_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                add_ln180_reg_1119 <= add_ln180_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln65_reg_998 <= add_ln65_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln70_reg_1027 <= add_ln70_fu_785_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_969_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv1_reg_993 <= grp_fu_684_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_969_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_reg_983 <= grp_fu_687_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_1086_pp3_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                div_reg_1105 <= grp_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_1_reg_396_pp1_iter1_reg <= i_1_reg_396;
                icmp_ln65_reg_1003 <= icmp_ln65_fu_752_p2;
                icmp_ln65_reg_1003_pp1_iter1_reg <= icmp_ln65_reg_1003;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                i_1_reg_396_pp1_iter2_reg <= i_1_reg_396_pp1_iter1_reg;
                i_1_reg_396_pp1_iter3_reg <= i_1_reg_396_pp1_iter2_reg;
                i_1_reg_396_pp1_iter4_reg <= i_1_reg_396_pp1_iter3_reg;
                i_1_reg_396_pp1_iter5_reg <= i_1_reg_396_pp1_iter4_reg;
                i_1_reg_396_pp1_iter6_reg <= i_1_reg_396_pp1_iter5_reg;
                icmp_ln65_reg_1003_pp1_iter2_reg <= icmp_ln65_reg_1003_pp1_iter1_reg;
                icmp_ln65_reg_1003_pp1_iter3_reg <= icmp_ln65_reg_1003_pp1_iter2_reg;
                icmp_ln65_reg_1003_pp1_iter4_reg <= icmp_ln65_reg_1003_pp1_iter3_reg;
                icmp_ln65_reg_1003_pp1_iter5_reg <= icmp_ln65_reg_1003_pp1_iter4_reg;
                icmp_ln65_reg_1003_pp1_iter6_reg <= icmp_ln65_reg_1003_pp1_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                i_2_reg_419_pp2_iter1_reg <= i_2_reg_419;
                icmp_ln70_reg_1032 <= icmp_ln70_fu_791_p2;
                icmp_ln70_reg_1032_pp2_iter1_reg <= icmp_ln70_reg_1032;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                i_2_reg_419_pp2_iter2_reg <= i_2_reg_419_pp2_iter1_reg;
                i_2_reg_419_pp2_iter3_reg <= i_2_reg_419_pp2_iter2_reg;
                i_2_reg_419_pp2_iter4_reg <= i_2_reg_419_pp2_iter3_reg;
                i_2_reg_419_pp2_iter5_reg <= i_2_reg_419_pp2_iter4_reg;
                i_2_reg_419_pp2_iter6_reg <= i_2_reg_419_pp2_iter5_reg;
                icmp_ln70_reg_1032_pp2_iter2_reg <= icmp_ln70_reg_1032_pp2_iter1_reg;
                icmp_ln70_reg_1032_pp2_iter3_reg <= icmp_ln70_reg_1032_pp2_iter2_reg;
                icmp_ln70_reg_1032_pp2_iter4_reg <= icmp_ln70_reg_1032_pp2_iter3_reg;
                icmp_ln70_reg_1032_pp2_iter5_reg <= icmp_ln70_reg_1032_pp2_iter4_reg;
                icmp_ln70_reg_1032_pp2_iter6_reg <= icmp_ln70_reg_1032_pp2_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_834_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    i_3_cast_reg_1090(3 downto 0) <= i_3_cast_fu_840_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                    i_3_cast_reg_1090_pp3_iter10_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter9_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter11_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter10_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter12_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter11_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter13_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter12_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter14_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter13_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter15_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter14_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter16_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter15_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter17_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter16_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter18_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter17_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter19_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter18_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter20_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter19_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter21_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter20_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter2_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter1_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter3_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter2_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter4_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter3_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter5_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter4_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter6_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter5_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter7_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter6_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter8_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter7_reg(3 downto 0);
                    i_3_cast_reg_1090_pp3_iter9_reg(3 downto 0) <= i_3_cast_reg_1090_pp3_iter8_reg(3 downto 0);
                icmp_ln78_reg_1086_pp3_iter10_reg <= icmp_ln78_reg_1086_pp3_iter9_reg;
                icmp_ln78_reg_1086_pp3_iter11_reg <= icmp_ln78_reg_1086_pp3_iter10_reg;
                icmp_ln78_reg_1086_pp3_iter12_reg <= icmp_ln78_reg_1086_pp3_iter11_reg;
                icmp_ln78_reg_1086_pp3_iter13_reg <= icmp_ln78_reg_1086_pp3_iter12_reg;
                icmp_ln78_reg_1086_pp3_iter14_reg <= icmp_ln78_reg_1086_pp3_iter13_reg;
                icmp_ln78_reg_1086_pp3_iter15_reg <= icmp_ln78_reg_1086_pp3_iter14_reg;
                icmp_ln78_reg_1086_pp3_iter16_reg <= icmp_ln78_reg_1086_pp3_iter15_reg;
                icmp_ln78_reg_1086_pp3_iter17_reg <= icmp_ln78_reg_1086_pp3_iter16_reg;
                icmp_ln78_reg_1086_pp3_iter18_reg <= icmp_ln78_reg_1086_pp3_iter17_reg;
                icmp_ln78_reg_1086_pp3_iter19_reg <= icmp_ln78_reg_1086_pp3_iter18_reg;
                icmp_ln78_reg_1086_pp3_iter20_reg <= icmp_ln78_reg_1086_pp3_iter19_reg;
                icmp_ln78_reg_1086_pp3_iter21_reg <= icmp_ln78_reg_1086_pp3_iter20_reg;
                icmp_ln78_reg_1086_pp3_iter2_reg <= icmp_ln78_reg_1086_pp3_iter1_reg;
                icmp_ln78_reg_1086_pp3_iter3_reg <= icmp_ln78_reg_1086_pp3_iter2_reg;
                icmp_ln78_reg_1086_pp3_iter4_reg <= icmp_ln78_reg_1086_pp3_iter3_reg;
                icmp_ln78_reg_1086_pp3_iter5_reg <= icmp_ln78_reg_1086_pp3_iter4_reg;
                icmp_ln78_reg_1086_pp3_iter6_reg <= icmp_ln78_reg_1086_pp3_iter5_reg;
                icmp_ln78_reg_1086_pp3_iter7_reg <= icmp_ln78_reg_1086_pp3_iter6_reg;
                icmp_ln78_reg_1086_pp3_iter8_reg <= icmp_ln78_reg_1086_pp3_iter7_reg;
                icmp_ln78_reg_1086_pp3_iter9_reg <= icmp_ln78_reg_1086_pp3_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                    i_3_cast_reg_1090_pp3_iter1_reg(3 downto 0) <= i_3_cast_reg_1090(3 downto 0);
                icmp_ln78_reg_1086 <= icmp_ln78_fu_834_p2;
                icmp_ln78_reg_1086_pp3_iter1_reg <= icmp_ln78_reg_1086;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                i_5_reg_453_pp4_iter1_reg <= i_5_reg_453;
                icmp_ln180_reg_1110 <= icmp_ln180_fu_845_p2;
                icmp_ln180_reg_1110_pp4_iter1_reg <= icmp_ln180_reg_1110;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_735_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_cast_reg_973(3 downto 0) <= i_cast_fu_741_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                    i_cast_reg_973_pp0_iter10_reg(3 downto 0) <= i_cast_reg_973_pp0_iter9_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter11_reg(3 downto 0) <= i_cast_reg_973_pp0_iter10_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter12_reg(3 downto 0) <= i_cast_reg_973_pp0_iter11_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter13_reg(3 downto 0) <= i_cast_reg_973_pp0_iter12_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter14_reg(3 downto 0) <= i_cast_reg_973_pp0_iter13_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter15_reg(3 downto 0) <= i_cast_reg_973_pp0_iter14_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter16_reg(3 downto 0) <= i_cast_reg_973_pp0_iter15_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter17_reg(3 downto 0) <= i_cast_reg_973_pp0_iter16_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter18_reg(3 downto 0) <= i_cast_reg_973_pp0_iter17_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter19_reg(3 downto 0) <= i_cast_reg_973_pp0_iter18_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter20_reg(3 downto 0) <= i_cast_reg_973_pp0_iter19_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter21_reg(3 downto 0) <= i_cast_reg_973_pp0_iter20_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter22_reg(3 downto 0) <= i_cast_reg_973_pp0_iter21_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter23_reg(3 downto 0) <= i_cast_reg_973_pp0_iter22_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter24_reg(3 downto 0) <= i_cast_reg_973_pp0_iter23_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter25_reg(3 downto 0) <= i_cast_reg_973_pp0_iter24_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter2_reg(3 downto 0) <= i_cast_reg_973_pp0_iter1_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter3_reg(3 downto 0) <= i_cast_reg_973_pp0_iter2_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter4_reg(3 downto 0) <= i_cast_reg_973_pp0_iter3_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter5_reg(3 downto 0) <= i_cast_reg_973_pp0_iter4_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter6_reg(3 downto 0) <= i_cast_reg_973_pp0_iter5_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter7_reg(3 downto 0) <= i_cast_reg_973_pp0_iter6_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter8_reg(3 downto 0) <= i_cast_reg_973_pp0_iter7_reg(3 downto 0);
                    i_cast_reg_973_pp0_iter9_reg(3 downto 0) <= i_cast_reg_973_pp0_iter8_reg(3 downto 0);
                icmp_ln60_reg_969_pp0_iter10_reg <= icmp_ln60_reg_969_pp0_iter9_reg;
                icmp_ln60_reg_969_pp0_iter11_reg <= icmp_ln60_reg_969_pp0_iter10_reg;
                icmp_ln60_reg_969_pp0_iter12_reg <= icmp_ln60_reg_969_pp0_iter11_reg;
                icmp_ln60_reg_969_pp0_iter13_reg <= icmp_ln60_reg_969_pp0_iter12_reg;
                icmp_ln60_reg_969_pp0_iter14_reg <= icmp_ln60_reg_969_pp0_iter13_reg;
                icmp_ln60_reg_969_pp0_iter15_reg <= icmp_ln60_reg_969_pp0_iter14_reg;
                icmp_ln60_reg_969_pp0_iter16_reg <= icmp_ln60_reg_969_pp0_iter15_reg;
                icmp_ln60_reg_969_pp0_iter17_reg <= icmp_ln60_reg_969_pp0_iter16_reg;
                icmp_ln60_reg_969_pp0_iter18_reg <= icmp_ln60_reg_969_pp0_iter17_reg;
                icmp_ln60_reg_969_pp0_iter19_reg <= icmp_ln60_reg_969_pp0_iter18_reg;
                icmp_ln60_reg_969_pp0_iter20_reg <= icmp_ln60_reg_969_pp0_iter19_reg;
                icmp_ln60_reg_969_pp0_iter21_reg <= icmp_ln60_reg_969_pp0_iter20_reg;
                icmp_ln60_reg_969_pp0_iter22_reg <= icmp_ln60_reg_969_pp0_iter21_reg;
                icmp_ln60_reg_969_pp0_iter23_reg <= icmp_ln60_reg_969_pp0_iter22_reg;
                icmp_ln60_reg_969_pp0_iter24_reg <= icmp_ln60_reg_969_pp0_iter23_reg;
                icmp_ln60_reg_969_pp0_iter25_reg <= icmp_ln60_reg_969_pp0_iter24_reg;
                icmp_ln60_reg_969_pp0_iter2_reg <= icmp_ln60_reg_969_pp0_iter1_reg;
                icmp_ln60_reg_969_pp0_iter3_reg <= icmp_ln60_reg_969_pp0_iter2_reg;
                icmp_ln60_reg_969_pp0_iter4_reg <= icmp_ln60_reg_969_pp0_iter3_reg;
                icmp_ln60_reg_969_pp0_iter5_reg <= icmp_ln60_reg_969_pp0_iter4_reg;
                icmp_ln60_reg_969_pp0_iter6_reg <= icmp_ln60_reg_969_pp0_iter5_reg;
                icmp_ln60_reg_969_pp0_iter7_reg <= icmp_ln60_reg_969_pp0_iter6_reg;
                icmp_ln60_reg_969_pp0_iter8_reg <= icmp_ln60_reg_969_pp0_iter7_reg;
                icmp_ln60_reg_969_pp0_iter9_reg <= icmp_ln60_reg_969_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_cast_reg_973_pp0_iter1_reg(3 downto 0) <= i_cast_reg_973(3 downto 0);
                icmp_ln60_reg_969 <= icmp_ln60_fu_735_p2;
                icmp_ln60_reg_969_pp0_iter1_reg <= icmp_ln60_reg_969;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln180_reg_1110 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln182_2_reg_1124 <= icmp_ln182_2_fu_880_p2;
                icmp_ln182_3_reg_1129 <= icmp_ln182_3_fu_886_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln180_reg_1110_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                maxi_reg_465 <= maxi_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_reg_1086_pp3_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                mul_reg_1100 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln180_reg_1110 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)) or ((icmp_ln60_reg_969 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_701 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state98) or ((icmp_ln70_reg_1032_pp2_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln65_reg_1003_pp1_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then
                reg_714 <= grp_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                singleElement_load_1_reg_1022 <= singleElement_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1032 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tempsum1_load_2_reg_1051 <= tempsum1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                tempsum2_load_1_reg_1071 <= tempsum2_q0;
                tempsum2_load_reg_1066 <= tempsum2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_reg_969_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_reg_988 <= grp_fu_696_p2;
            end if;
        end if;
    end process;
    i_cast_reg_973(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter12_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter13_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter14_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter15_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter16_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter17_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter18_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter19_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter20_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter21_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter22_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter23_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter24_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_973_pp0_iter25_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter12_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter13_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter14_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter15_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter16_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter17_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter18_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter19_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter20_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_3_cast_reg_1090_pp3_iter21_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp3_iter1, ap_enable_reg_pp1_iter6, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter0, icmp_ln60_fu_735_p2, ap_enable_reg_pp1_iter0, icmp_ln65_fu_752_p2, ap_enable_reg_pp2_iter0, icmp_ln70_fu_791_p2, ap_enable_reg_pp3_iter0, icmp_ln78_fu_834_p2, ap_enable_reg_pp4_iter1, ap_CS_fsm_state46, grp_update_result_fu_654_ap_done, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter7, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter7, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22, ap_block_pp4_stage1_subdone, ap_block_pp4_stage0_subdone, grp_Convolution_fu_489_ap_done, grp_pool_fu_618_ap_done, grp_FullyConnected_fu_624_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44, ap_block_state8_on_subcall_done, ap_block_state10_on_subcall_done, ap_block_state12_on_subcall_done, ap_block_state14_on_subcall_done, ap_block_state16_on_subcall_done, ap_block_state18_on_subcall_done, ap_block_state20_on_subcall_done, ap_block_state22_on_subcall_done, ap_block_state24_on_subcall_done, ap_block_state26_on_subcall_done, ap_block_state28_on_subcall_done, ap_block_state30_on_subcall_done, ap_block_state32_on_subcall_done, ap_block_state34_on_subcall_done, ap_block_state36_on_subcall_done, ap_block_state38_on_subcall_done, ap_block_state40_on_subcall_done, ap_block_state42_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Convolution_fu_489_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_pool_fu_618_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_boolean_0 = ap_block_state14_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_boolean_0 = ap_block_state16_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_boolean_0 = ap_block_state18_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_boolean_0 = ap_block_state22_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_boolean_0 = ap_block_state24_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (ap_const_boolean_0 = ap_block_state28_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (ap_const_boolean_0 = ap_block_state32_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (ap_const_boolean_0 = ap_block_state34_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (ap_const_boolean_0 = ap_block_state36_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_boolean_0 = ap_block_state38_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (ap_const_boolean_0 = ap_block_state40_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (ap_const_boolean_0 = ap_block_state42_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (grp_FullyConnected_fu_624_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_update_result_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln60_fu_735_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln60_fu_735_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln65_fu_752_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln65_fu_752_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln70_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((icmp_ln70_fu_791_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state92;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln78_fu_834_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((icmp_ln78_fu_834_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state127;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state132;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln180_fu_856_p2 <= std_logic_vector(unsigned(i_5_reg_453) + unsigned(ap_const_lv4_1));
    add_ln60_fu_729_p2 <= std_logic_vector(unsigned(i_reg_385) + unsigned(ap_const_lv4_1));
    add_ln65_1_fu_774_p2 <= std_logic_vector(unsigned(j_reg_408) + unsigned(ap_const_lv4_2));
    add_ln65_fu_746_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_400_p4) + unsigned(ap_const_lv3_1));
    add_ln70_1_fu_817_p2 <= std_logic_vector(unsigned(j_1_reg_431) + unsigned(ap_const_lv3_2));
    add_ln70_fu_785_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_423_p4) + unsigned(ap_const_lv2_1));
    add_ln78_fu_828_p2 <= std_logic_vector(unsigned(i_3_reg_442) + unsigned(ap_const_lv4_1));
    and_ln182_1_fu_938_p2 <= (grp_fu_691_p2 and and_ln182_fu_932_p2);
    and_ln182_fu_932_p2 <= (or_ln182_fu_922_p2 and or_ln182_1_fu_928_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(48);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(50);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(63);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(65);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(66);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state103 <= ap_CS_fsm(62);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state127 <= ap_CS_fsm(64);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state132 <= ap_CS_fsm(67);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state74 <= ap_CS_fsm(47);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state83 <= ap_CS_fsm(49);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state92 <= ap_CS_fsm(51);
    ap_CS_fsm_state93 <= ap_CS_fsm(52);
    ap_CS_fsm_state94 <= ap_CS_fsm(53);
    ap_CS_fsm_state97 <= ap_CS_fsm(56);
    ap_CS_fsm_state98 <= ap_CS_fsm(57);
    ap_CS_fsm_state99 <= ap_CS_fsm(58);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state104_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state105_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;

        ap_block_state110_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp3_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp3_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp3_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp3_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp3_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp3_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp3_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp3_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp3_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp3_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp3_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp3_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp3_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp3_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp3_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp3_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp4_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;

        ap_block_state130_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state16_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state16_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state22_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state22_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state24_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state24_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state26_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state28_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state28_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_init_1_fu_606_ap_ready, ap_sync_grp_init_1_fu_606_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_init_1_fu_606_ap_ready and ap_sync_grp_init_1_fu_606_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state30_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state32_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state32_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state34_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state34_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state36_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state36_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state38_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state38_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;


    ap_block_state40_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state40_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;


    ap_block_state42_on_subcall_done_assign_proc : process(grp_update_result_fu_654_ap_done, grp_pool_fu_618_ap_done)
    begin
                ap_block_state42_on_subcall_done <= ((grp_update_result_fu_654_ap_done = ap_const_logic_0) or (grp_pool_fu_618_ap_done = ap_const_logic_0));
    end process;

        ap_block_state47_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_on_subcall_done_assign_proc : process(grp_Convolution_fu_489_ap_done, grp_FullyConnected_fu_624_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_FullyConnected_fu_624_ap_done = ap_const_logic_0) or (grp_Convolution_fu_489_ap_done = ap_const_logic_0));
    end process;

        ap_block_state90_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state47_assign_proc : process(icmp_ln60_fu_735_p2)
    begin
        if ((icmp_ln60_fu_735_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state75_assign_proc : process(icmp_ln65_fu_752_p2)
    begin
        if ((icmp_ln65_fu_752_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state75 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state75 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state84_assign_proc : process(icmp_ln70_fu_791_p2)
    begin
        if ((icmp_ln70_fu_791_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state84 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state84 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state104_assign_proc : process(icmp_ln78_fu_834_p2)
    begin
        if ((icmp_ln78_fu_834_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state104 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state104 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_flush_enable_assign_proc : process(ap_CS_fsm_pp4_stage1, icmp_ln180_reg_1110, ap_block_pp4_stage1_subdone)
    begin
        if (((icmp_ln180_reg_1110 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
            ap_condition_pp4_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp4_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter7)
    begin
        if (((ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_enable_reg_pp3_iter7, ap_enable_reg_pp3_iter8, ap_enable_reg_pp3_iter9, ap_enable_reg_pp3_iter10, ap_enable_reg_pp3_iter11, ap_enable_reg_pp3_iter12, ap_enable_reg_pp3_iter13, ap_enable_reg_pp3_iter14, ap_enable_reg_pp3_iter15, ap_enable_reg_pp3_iter16, ap_enable_reg_pp3_iter17, ap_enable_reg_pp3_iter18, ap_enable_reg_pp3_iter19, ap_enable_reg_pp3_iter20, ap_enable_reg_pp3_iter21, ap_enable_reg_pp3_iter22)
    begin
        if (((ap_enable_reg_pp3_iter22 = ap_const_logic_0) and (ap_enable_reg_pp3_iter21 = ap_const_logic_0) and (ap_enable_reg_pp3_iter20 = ap_const_logic_0) and (ap_enable_reg_pp3_iter19 = ap_const_logic_0) and (ap_enable_reg_pp3_iter18 = ap_const_logic_0) and (ap_enable_reg_pp3_iter17 = ap_const_logic_0) and (ap_enable_reg_pp3_iter16 = ap_const_logic_0) and (ap_enable_reg_pp3_iter15 = ap_const_logic_0) and (ap_enable_reg_pp3_iter14 = ap_const_logic_0) and (ap_enable_reg_pp3_iter13 = ap_const_logic_0) and (ap_enable_reg_pp3_iter12 = ap_const_logic_0) and (ap_enable_reg_pp3_iter11 = ap_const_logic_0) and (ap_enable_reg_pp3_iter10 = ap_const_logic_0) and (ap_enable_reg_pp3_iter9 = ap_const_logic_0) and (ap_enable_reg_pp3_iter8 = ap_const_logic_0) and (ap_enable_reg_pp3_iter7 = ap_const_logic_0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_400_p4_assign_proc : process(i_1_reg_396, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln65_reg_1003, add_ln65_reg_998, ap_block_pp1_stage0)
    begin
        if (((icmp_ln65_reg_1003 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_400_p4 <= add_ln65_reg_998;
        else 
            ap_phi_mux_i_1_phi_fu_400_p4 <= i_1_reg_396;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_423_p4_assign_proc : process(i_2_reg_419, ap_CS_fsm_pp2_stage0, icmp_ln70_reg_1032, ap_enable_reg_pp2_iter1, add_ln70_reg_1027, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln70_reg_1032 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i_2_phi_fu_423_p4 <= add_ln70_reg_1027;
        else 
            ap_phi_mux_i_2_phi_fu_423_p4 <= i_2_reg_419;
        end if; 
    end process;


    ap_phi_mux_i_5_phi_fu_457_p4_assign_proc : process(i_5_reg_453, ap_CS_fsm_pp4_stage0, icmp_ln180_reg_1110, add_ln180_reg_1119, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln180_reg_1110 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_i_5_phi_fu_457_p4 <= add_ln180_reg_1119;
        else 
            ap_phi_mux_i_5_phi_fu_457_p4 <= i_5_reg_453;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state132)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= maxi_reg_465;
    ap_sync_grp_init_1_fu_606_ap_done <= (grp_init_1_fu_606_ap_done or ap_sync_reg_grp_init_1_fu_606_ap_done);
    ap_sync_grp_init_1_fu_606_ap_ready <= (grp_init_1_fu_606_ap_ready or ap_sync_reg_grp_init_1_fu_606_ap_ready);
    bitcast_ln182_1_fu_862_p1 <= max_reg_477;
    bitcast_ln182_fu_892_p1 <= reg_701;
    empty_88_fu_802_p1 <= j_1_reg_431(2 - 1 downto 0);

    fc_address0_assign_proc : process(ap_CS_fsm_state46, grp_FullyConnected_fu_624_result_address0, grp_update_result_fu_654_fc_address0, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fc_address0 <= grp_update_result_fu_654_fc_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fc_address0 <= grp_FullyConnected_fu_624_result_address0;
        else 
            fc_address0 <= "XXXXXXX";
        end if; 
    end process;


    fc_ce0_assign_proc : process(ap_CS_fsm_state46, grp_FullyConnected_fu_624_result_ce0, grp_update_result_fu_654_fc_ce0, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            fc_ce0 <= grp_update_result_fu_654_fc_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fc_ce0 <= grp_FullyConnected_fu_624_result_ce0;
        else 
            fc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_ce1_assign_proc : process(grp_FullyConnected_fu_624_result_ce1, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fc_ce1 <= grp_FullyConnected_fu_624_result_ce1;
        else 
            fc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fc_we0_assign_proc : process(grp_FullyConnected_fu_624_result_we0, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fc_we0 <= grp_FullyConnected_fu_624_result_we0;
        else 
            fc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc_we1_assign_proc : process(grp_FullyConnected_fu_624_result_we1, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            fc_we1 <= grp_FullyConnected_fu_624_result_we1;
        else 
            fc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Convolution_fu_489_ap_start <= grp_Convolution_fu_489_ap_start_reg;

    grp_Convolution_fu_489_kernelNumber_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_Convolution_fu_489_kernelNumber <= ap_const_lv4_0;
        else 
            grp_Convolution_fu_489_kernelNumber <= "XXXX";
        end if; 
    end process;

    grp_FullyConnected_fu_624_ap_start <= grp_FullyConnected_fu_624_ap_start_reg;

    grp_FullyConnected_fu_624_nKernel_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FullyConnected_fu_624_nKernel <= ap_const_lv4_0;
        else 
            grp_FullyConnected_fu_624_nKernel <= "XXXX";
        end if; 
    end process;


    grp_FullyConnected_fu_624_result_offset_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state44)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_FullyConnected_fu_624_result_offset <= ap_const_lv4_0;
        else 
            grp_FullyConnected_fu_624_result_offset <= "XXXX";
        end if; 
    end process;


    grp_fu_671_p0_assign_proc : process(reg_707, reg_714, reg_722, tempsum2_load_reg_1066, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state94, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_671_p0 <= reg_714;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_671_p0 <= tempsum2_load_reg_1066;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_671_p0 <= reg_722;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_671_p0 <= reg_707;
        else 
            grp_fu_671_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_671_p1_assign_proc : process(reg_722, singleElement_load_1_reg_1022, tempsum1_load_2_reg_1051, tempsum2_load_1_reg_1071, ap_enable_reg_pp1_iter2, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state94, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            grp_fu_671_p1 <= reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_671_p1 <= tempsum2_load_1_reg_1071;
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_671_p1 <= tempsum1_load_2_reg_1051;
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_671_p1 <= singleElement_load_1_reg_1022;
        else 
            grp_fu_671_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_init_1_fu_606_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_init_1_fu_606_ap_continue <= ap_const_logic_1;
        else 
            grp_init_1_fu_606_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_init_1_fu_606_ap_start <= grp_init_1_fu_606_ap_start_reg;
    grp_pool_fu_618_ap_start <= grp_pool_fu_618_ap_start_reg;
    grp_update_result_fu_654_ap_start <= grp_update_result_fu_654_ap_start_reg;

    grp_update_result_fu_654_fc_offset_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_update_result_fu_654_fc_offset <= ap_const_lv4_0;
        else 
            grp_update_result_fu_654_fc_offset <= "XXXX";
        end if; 
    end process;

    i_1_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_396_pp1_iter6_reg),64));
    i_2_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_419_pp2_iter6_reg),64));
    i_3_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_442),64));
    i_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_385),64));
    icmp_ln180_fu_845_p2 <= "1" when (ap_phi_mux_i_5_phi_fu_457_p4 = ap_const_lv4_A) else "0";
    icmp_ln182_1_fu_916_p2 <= "1" when (trunc_ln182_fu_906_p1 = ap_const_lv23_0) else "0";
    icmp_ln182_2_fu_880_p2 <= "0" when (tmp_230_fu_866_p4 = ap_const_lv8_FF) else "1";
    icmp_ln182_3_fu_886_p2 <= "1" when (trunc_ln182_1_fu_876_p1 = ap_const_lv23_0) else "0";
    icmp_ln182_fu_910_p2 <= "0" when (tmp_s_fu_896_p4 = ap_const_lv8_FF) else "1";
    icmp_ln60_fu_735_p2 <= "1" when (i_reg_385 = ap_const_lv4_A) else "0";
    icmp_ln65_fu_752_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_400_p4 = ap_const_lv3_5) else "0";
    icmp_ln70_fu_791_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_423_p4 = ap_const_lv2_2) else "0";
    icmp_ln78_fu_834_p2 <= "1" when (i_3_reg_442 = ap_const_lv4_A) else "0";

    input_address0_assign_proc : process(grp_Convolution_fu_489_tensor_address0, grp_init_1_fu_606_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_address0 <= grp_init_1_fu_606_input_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_address0 <= grp_Convolution_fu_489_tensor_address0;
        else 
            input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_address1_assign_proc : process(grp_Convolution_fu_489_tensor_address1, grp_init_1_fu_606_input_r_address1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_address1 <= grp_init_1_fu_606_input_r_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_address1 <= grp_Convolution_fu_489_tensor_address1;
        else 
            input_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_ce0_assign_proc : process(grp_Convolution_fu_489_tensor_ce0, grp_init_1_fu_606_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_ce0 <= grp_init_1_fu_606_input_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_ce0 <= grp_Convolution_fu_489_tensor_ce0;
        else 
            input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_ce1_assign_proc : process(grp_Convolution_fu_489_tensor_ce1, grp_init_1_fu_606_input_r_ce1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_ce1 <= grp_init_1_fu_606_input_r_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_ce1 <= grp_Convolution_fu_489_tensor_ce1;
        else 
            input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_we0_assign_proc : process(grp_init_1_fu_606_input_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_we0 <= grp_init_1_fu_606_input_r_we0;
        else 
            input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_we1_assign_proc : process(grp_init_1_fu_606_input_r_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_we1 <= grp_init_1_fu_606_input_r_we1;
        else 
            input_we1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast1_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_431),64));
    j_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_408),64));
    max_2_fu_944_p3 <= 
        reg_701 when (and_ln182_1_fu_938_p2(0) = '1') else 
        max_reg_477;
    maxi_2_fu_956_p3 <= 
        zext_ln182_fu_952_p1 when (and_ln182_1_fu_938_p2(0) = '1') else 
        maxi_reg_465;
    or_ln182_1_fu_928_p2 <= (icmp_ln182_3_reg_1129 or icmp_ln182_2_reg_1124);
    or_ln182_fu_922_p2 <= (icmp_ln182_fu_910_p2 or icmp_ln182_1_fu_916_p2);
    or_ln66_fu_763_p2 <= (j_reg_408 or ap_const_lv4_1);
    or_ln71_fu_806_p2 <= (empty_88_fu_802_p1 or ap_const_lv2_1);

    result_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp4_iter0, ap_enable_reg_pp0_iter0, i_cast_fu_741_p1, i_3_cast_reg_1090_pp3_iter21_reg, ap_CS_fsm_state46, ap_enable_reg_pp3_iter22, grp_init_1_fu_606_result_address0, grp_update_result_fu_654_result_address0, ap_block_pp4_stage0, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_block_pp0_stage0, ap_block_pp3_stage0, zext_ln180_fu_851_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            result_address0 <= zext_ln180_fu_851_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            result_address0 <= i_3_cast_reg_1090_pp3_iter21_reg(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            result_address0 <= i_cast_fu_741_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_address0 <= grp_update_result_fu_654_result_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_address0 <= grp_init_1_fu_606_result_address0;
        else 
            result_address0 <= "XXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp4_iter0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state46, ap_enable_reg_pp3_iter22, grp_init_1_fu_606_result_ce0, grp_update_result_fu_654_result_ce0, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            result_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_ce0 <= grp_update_result_fu_654_result_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_ce0 <= grp_init_1_fu_606_result_ce0;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_state46, grp_update_result_fu_654_result_ce1, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_ce1 <= grp_update_result_fu_654_result_ce1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(div_reg_1105, ap_CS_fsm_state46, ap_enable_reg_pp3_iter22, grp_init_1_fu_606_result_d0, grp_update_result_fu_654_result_d0, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            result_d0 <= div_reg_1105;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_d0 <= grp_update_result_fu_654_result_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_d0 <= grp_init_1_fu_606_result_d0;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln78_reg_1086_pp3_iter21_reg, ap_CS_fsm_state46, ap_enable_reg_pp3_iter22, grp_init_1_fu_606_result_we0, grp_update_result_fu_654_result_we0, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_enable_reg_pp3_iter22 = ap_const_logic_1) and (icmp_ln78_reg_1086_pp3_iter21_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            result_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            result_we0 <= grp_update_result_fu_654_result_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_we0 <= grp_init_1_fu_606_result_we0;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    singleElement_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp3_stage0, i_cast_reg_973_pp0_iter25_reg, ap_enable_reg_pp1_iter0, ap_enable_reg_pp3_iter0, i_3_cast_fu_840_p1, ap_enable_reg_pp0_iter26, ap_block_pp1_stage0, ap_block_pp0_stage0, zext_ln66_fu_769_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            singleElement_address0 <= i_3_cast_fu_840_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            singleElement_address0 <= zext_ln66_fu_769_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            singleElement_address0 <= i_cast_reg_973_pp0_iter25_reg(4 - 1 downto 0);
        else 
            singleElement_address0 <= "XXXX";
        end if; 
    end process;

    singleElement_address1 <= j_cast_fu_758_p1(4 - 1 downto 0);

    singleElement_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp0_stage0_11001, ap_block_pp3_stage0_11001, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp0_iter26)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            singleElement_ce0 <= ap_const_logic_1;
        else 
            singleElement_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    singleElement_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            singleElement_ce1 <= ap_const_logic_1;
        else 
            singleElement_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    singleElement_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln60_reg_969_pp0_iter25_reg, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (icmp_ln60_reg_969_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            singleElement_we0 <= ap_const_logic_1;
        else 
            singleElement_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempConvoluted_address0_assign_proc : process(grp_Convolution_fu_489_convoluted_address0, grp_pool_fu_618_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempConvoluted_address0 <= grp_pool_fu_618_input_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tempConvoluted_address0 <= grp_Convolution_fu_489_convoluted_address0;
        else 
            tempConvoluted_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    tempConvoluted_ce0_assign_proc : process(grp_Convolution_fu_489_convoluted_ce0, grp_pool_fu_618_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempConvoluted_ce0 <= grp_pool_fu_618_input_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tempConvoluted_ce0 <= grp_Convolution_fu_489_convoluted_ce0;
        else 
            tempConvoluted_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempConvoluted_ce1_assign_proc : process(grp_pool_fu_618_input_r_ce1, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempConvoluted_ce1 <= grp_pool_fu_618_input_r_ce1;
        else 
            tempConvoluted_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempConvoluted_we0_assign_proc : process(grp_Convolution_fu_489_convoluted_we0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tempConvoluted_we0 <= grp_Convolution_fu_489_convoluted_we0;
        else 
            tempConvoluted_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempMaxPooled_address0_assign_proc : process(grp_pool_fu_618_buffer_r_address0, grp_FullyConnected_fu_624_tensor_address0, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tempMaxPooled_address0 <= grp_FullyConnected_fu_624_tensor_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempMaxPooled_address0 <= grp_pool_fu_618_buffer_r_address0;
        else 
            tempMaxPooled_address0 <= "XXXXXX";
        end if; 
    end process;


    tempMaxPooled_ce0_assign_proc : process(grp_pool_fu_618_buffer_r_ce0, grp_FullyConnected_fu_624_tensor_ce0, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state24, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            tempMaxPooled_ce0 <= grp_FullyConnected_fu_624_tensor_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempMaxPooled_ce0 <= grp_pool_fu_618_buffer_r_ce0;
        else 
            tempMaxPooled_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempMaxPooled_ce1_assign_proc : process(grp_pool_fu_618_buffer_r_ce1, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempMaxPooled_ce1 <= grp_pool_fu_618_buffer_r_ce1;
        else 
            tempMaxPooled_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempMaxPooled_we0_assign_proc : process(grp_pool_fu_618_buffer_r_we0, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempMaxPooled_we0 <= grp_pool_fu_618_buffer_r_we0;
        else 
            tempMaxPooled_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempMaxPooled_we1_assign_proc : process(grp_pool_fu_618_buffer_r_we1, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state22, ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tempMaxPooled_we1 <= grp_pool_fu_618_buffer_r_we1;
        else 
            tempMaxPooled_we1 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum1_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state97, ap_enable_reg_pp1_iter7, ap_block_pp1_stage0, ap_block_pp2_stage0, i_1_cast_fu_780_p1, zext_ln71_fu_812_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            tempsum1_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            tempsum1_address0 <= zext_ln71_fu_812_p1(3 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            tempsum1_address0 <= i_1_cast_fu_780_p1(3 - 1 downto 0);
        else 
            tempsum1_address0 <= "XXX";
        end if; 
    end process;

    tempsum1_address1 <= j_1_cast1_fu_797_p1(3 - 1 downto 0);

    tempsum1_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state97, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            tempsum1_ce0 <= ap_const_logic_1;
        else 
            tempsum1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum1_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            tempsum1_ce1 <= ap_const_logic_1;
        else 
            tempsum1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum1_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln65_reg_1003_pp1_iter6_reg, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (icmp_ln65_reg_1003_pp1_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            tempsum1_we0 <= ap_const_logic_1;
        else 
            tempsum1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum2_address0_assign_proc : process(ap_CS_fsm_state92, ap_enable_reg_pp2_iter7, ap_block_pp2_stage0, i_2_cast_fu_823_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            tempsum2_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            tempsum2_address0 <= i_2_cast_fu_823_p1(1 - 1 downto 0);
        else 
            tempsum2_address0 <= "X";
        end if; 
    end process;

    tempsum2_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    tempsum2_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state92, ap_enable_reg_pp2_iter7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state92) or ((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            tempsum2_ce0 <= ap_const_logic_1;
        else 
            tempsum2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum2_ce1_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            tempsum2_ce1 <= ap_const_logic_1;
        else 
            tempsum2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempsum2_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln70_reg_1032_pp2_iter6_reg, ap_enable_reg_pp2_iter7)
    begin
        if (((ap_enable_reg_pp2_iter7 = ap_const_logic_1) and (icmp_ln70_reg_1032_pp2_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            tempsum2_we0 <= ap_const_logic_1;
        else 
            tempsum2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_address0 <= grp_init_1_fu_606_tensor_address0;
    tensor_address1 <= grp_init_1_fu_606_tensor_address1;
    tensor_ce0 <= grp_init_1_fu_606_tensor_ce0;
    tensor_ce1 <= grp_init_1_fu_606_tensor_ce1;
    tmp_230_fu_866_p4 <= bitcast_ln182_1_fu_862_p1(30 downto 23);
    tmp_s_fu_896_p4 <= bitcast_ln182_fu_892_p1(30 downto 23);
    trunc_ln182_1_fu_876_p1 <= bitcast_ln182_1_fu_862_p1(23 - 1 downto 0);
    trunc_ln182_fu_906_p1 <= bitcast_ln182_fu_892_p1(23 - 1 downto 0);
    zext_ln180_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_5_phi_fu_457_p4),64));
    zext_ln182_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_453_pp4_iter1_reg),32));
    zext_ln66_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln66_fu_763_p2),64));
    zext_ln71_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln71_fu_806_p2),64));
end behav;
