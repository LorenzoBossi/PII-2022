-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_FullyConnected is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tensor_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    tensor_ce0 : OUT STD_LOGIC;
    tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    nKernel : IN STD_LOGIC_VECTOR (3 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_we1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of CNN_FullyConnected is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv13_1EA : STD_LOGIC_VECTOR (12 downto 0) := "0000111101010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv10_7 : STD_LOGIC_VECTOR (9 downto 0) := "0000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_ce0 : STD_LOGIC;
    signal dense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_323 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv7_reg_335 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal icmp_ln372_reg_917 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln375_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage8 : signal is "none";
    signal ap_block_state12_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_state22_pp1_stage8_iter1 : BOOLEAN;
    signal ap_block_pp1_stage8_11001 : BOOLEAN;
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_state9_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage9 : signal is "none";
    signal ap_block_state13_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_state23_pp1_stage9_iter1 : BOOLEAN;
    signal ap_block_pp1_stage9_11001 : BOOLEAN;
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_state10_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage6_iter1 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage7 : signal is "none";
    signal ap_block_state11_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage7_iter1 : BOOLEAN;
    signal ap_block_pp1_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state5_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state25_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state7_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state27_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln375_reg_943_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_state6_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state26_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal add_ln368_fu_430_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln368_reg_832 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_1_reg_837 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_2_reg_843 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_3_reg_849 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_4_reg_855 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_5_reg_861 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_6_reg_867 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_7_reg_872 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_8_reg_877 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_9_reg_883 : STD_LOGIC_VECTOR (6 downto 0);
    signal result_addr_10_reg_889 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln367_fu_540_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln381_fu_569_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln381_reg_903 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln372_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln372_reg_917_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tempFlatten_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempFlatten_reg_926_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln372_fu_586_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln372_reg_933 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln375_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln379_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln379_reg_947 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln372_1_fu_653_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln372_1_reg_953 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln381_1_fu_672_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_1_reg_963 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_load_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_1_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_2_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_3_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_4_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_5_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln381_9_fu_818_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_9_reg_1039 : STD_LOGIC_VECTOR (12 downto 0);
    signal result_load_6_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_load_8_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_7_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_load_9_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_8_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_load_9_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal i_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln367_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_j_phi_fu_327_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_indvars_iv7_phi_fu_339_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal zext_ln382_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_1_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_2_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_3_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_4_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_5_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_6_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_7_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_8_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln382_9_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_2_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln372_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln381_3_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln381_5_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage4 : BOOLEAN;
    signal zext_ln381_7_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage5 : BOOLEAN;
    signal zext_ln381_9_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage6 : BOOLEAN;
    signal zext_ln381_11_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage7 : BOOLEAN;
    signal zext_ln381_13_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage8 : BOOLEAN;
    signal zext_ln381_15_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage9 : BOOLEAN;
    signal zext_ln381_17_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln381_19_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln381_21_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_418_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_410_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln368_fu_426_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln382_fu_441_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_fu_452_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_1_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_2_fu_474_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_3_fu_485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_4_fu_496_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_5_fu_507_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_6_fu_518_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln382_7_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln368_1_fu_552_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln368_1_fu_556_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln381_fu_569_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln381_fu_569_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_2_fu_592_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_fu_596_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln375_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln375_fu_619_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln375_1_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln375_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln375_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln381_4_fu_659_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_1_fu_662_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_fu_675_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_6_fu_681_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_2_fu_685_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_1_fu_695_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_8_fu_700_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_3_fu_704_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_2_fu_714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_10_fu_719_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_4_fu_723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_3_fu_733_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_12_fu_738_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_5_fu_742_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_4_fu_752_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_14_fu_757_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_6_fu_761_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_5_fu_771_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_16_fu_776_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_7_fu_780_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_6_fu_790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_18_fu_795_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln381_8_fu_799_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln379_7_fu_809_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln381_20_fu_814_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage2_00001 : BOOLEAN;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln381_fu_569_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component CNN_mul_4ns_10ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component CNN_FullyConnected_dense IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_U : component CNN_FullyConnected_dense
    generic map (
        DataWidth => 32,
        AddressRange => 4900,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_address0,
        ce0 => dense_ce0,
        q0 => dense_q0);

    fadd_32ns_32ns_32_5_full_dsp_1_U93 : component CNN_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U94 : component CNN_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_350_p0,
        din1 => grp_fu_350_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U95 : component CNN_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tempFlatten_reg_926,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_354_p2);

    mul_4ns_10ns_13_1_1_U96 : component CNN_mul_4ns_10ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln381_fu_569_p0,
        din1 => mul_ln381_fu_569_p1,
        dout => mul_ln381_fu_569_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_312 <= ap_const_lv4_0;
            elsif (((icmp_ln367_fu_546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_312 <= add_ln367_fu_540_p2;
            end if; 
        end if;
    end process;

    indvars_iv7_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (icmp_ln372_reg_917_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                indvars_iv7_reg_335 <= add_ln372_1_reg_953;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv7_reg_335 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                j_reg_323 <= add_ln372_reg_933;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_323 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    add_ln368_reg_832(6 downto 1) <= add_ln368_fu_430_p2(6 downto 1);
                    result_addr_10_reg_889(6 downto 1) <= zext_ln382_9_fu_535_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_1_reg_837(6 downto 1) <= zext_ln382_fu_436_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_2_reg_843(6 downto 1) <= zext_ln382_1_fu_447_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_3_reg_849(6 downto 1) <= zext_ln382_2_fu_458_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_4_reg_855(6 downto 1) <= zext_ln382_3_fu_469_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_5_reg_861(6 downto 1) <= zext_ln382_4_fu_480_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_6_reg_867(6 downto 1) <= zext_ln382_5_fu_491_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_7_reg_872(6 downto 1) <= zext_ln382_6_fu_502_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_8_reg_877(6 downto 1) <= zext_ln382_7_fu_513_p1(7 - 1 downto 0)(6 downto 1);
                    result_addr_9_reg_883(6 downto 1) <= zext_ln382_8_fu_524_p1(7 - 1 downto 0)(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                add_ln372_1_reg_953 <= add_ln372_1_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                add_ln372_reg_933 <= add_ln372_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                add_ln381_9_reg_1039 <= add_ln381_9_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                and_ln375_reg_943 <= and_ln375_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                and_ln375_reg_943_pp1_iter1_reg <= and_ln375_reg_943;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                dense_load_8_reg_1049 <= dense_q0;
                result_load_6_reg_1044 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                dense_load_9_reg_1064 <= dense_q0;
                result_load_7_reg_1059 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln372_reg_917 <= icmp_ln372_fu_575_p2;
                icmp_ln372_reg_917_pp1_iter1_reg <= icmp_ln372_reg_917;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mul_ln381_reg_903 <= mul_ln381_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_fu_641_p2) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                    or_ln379_reg_947(8 downto 1) <= or_ln379_fu_647_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)))) then
                reg_359 <= dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)))) then
                reg_364 <= dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_369 <= dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_374 <= dense_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_379 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_384 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_389 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_394 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_399 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then
                reg_404 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7))) then
                result_load_1_reg_989 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) then
                result_load_2_reg_999 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9))) then
                result_load_3_reg_1009 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                result_load_4_reg_1019 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                result_load_5_reg_1029 <= result_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                result_load_8_reg_1069 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                result_load_9_reg_1074 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6))) then
                result_load_reg_979 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tempFlatten_reg_926 <= tensor_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tempFlatten_reg_926_pp1_iter1_reg <= tempFlatten_reg_926;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln375_reg_943) and (icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then
                    zext_ln381_1_reg_963(8 downto 1) <= zext_ln381_1_fu_672_p1(8 downto 1);
            end if;
        end if;
    end process;
    add_ln368_reg_832(0) <= '0';
    result_addr_1_reg_837(0) <= '0';
    result_addr_2_reg_843(0) <= '1';
    result_addr_3_reg_849(0) <= '0';
    result_addr_4_reg_855(0) <= '1';
    result_addr_5_reg_861(0) <= '0';
    result_addr_6_reg_867(0) <= '1';
    result_addr_7_reg_872(0) <= '0';
    result_addr_8_reg_877(0) <= '1';
    result_addr_9_reg_883(0) <= '0';
    result_addr_10_reg_889(0) <= '1';
    or_ln379_reg_947(0) <= '1';
    zext_ln381_1_reg_963(0) <= '1';
    zext_ln381_1_reg_963(9) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp1_iter0, icmp_ln372_reg_917, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, ap_block_pp1_stage3_subdone, ap_block_pp1_stage9_subdone, icmp_ln367_fu_546_p2, ap_block_pp1_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln367_fu_546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((not(((icmp_ln372_reg_917 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                elsif ((((icmp_ln372_reg_917 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln367_fu_540_p2 <= std_logic_vector(unsigned(i_reg_312) + unsigned(ap_const_lv4_1));
    add_ln368_1_fu_556_p2 <= std_logic_vector(unsigned(add_ln368_reg_832) + unsigned(zext_ln368_1_fu_552_p1));
    add_ln368_fu_430_p2 <= std_logic_vector(unsigned(tmp_2_fu_410_p3) + unsigned(zext_ln368_fu_426_p1));
    add_ln372_1_fu_653_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvars_iv7_phi_fu_339_p4) + unsigned(ap_const_lv9_A));
    add_ln372_fu_586_p2 <= std_logic_vector(unsigned(j_reg_323) + unsigned(ap_const_lv6_1));
    add_ln379_1_fu_695_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_2));
    add_ln379_2_fu_714_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_3));
    add_ln379_3_fu_733_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_4));
    add_ln379_4_fu_752_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_5));
    add_ln379_5_fu_771_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_6));
    add_ln379_6_fu_790_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_7));
    add_ln379_7_fu_809_p2 <= std_logic_vector(unsigned(zext_ln381_1_reg_963) + unsigned(ap_const_lv10_8));
    add_ln379_fu_675_p2 <= std_logic_vector(unsigned(zext_ln381_1_fu_672_p1) + unsigned(ap_const_lv10_1));
    add_ln381_1_fu_662_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_4_fu_659_p1));
    add_ln381_2_fu_685_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_6_fu_681_p1));
    add_ln381_3_fu_704_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_8_fu_700_p1));
    add_ln381_4_fu_723_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_10_fu_719_p1));
    add_ln381_5_fu_742_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_12_fu_738_p1));
    add_ln381_6_fu_761_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_14_fu_757_p1));
    add_ln381_7_fu_780_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_16_fu_776_p1));
    add_ln381_8_fu_799_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_18_fu_795_p1));
    add_ln381_9_fu_818_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_20_fu_814_p1));
    add_ln381_fu_596_p2 <= std_logic_vector(unsigned(mul_ln381_reg_903) + unsigned(zext_ln381_2_fu_592_p1));
    add_ln382_1_fu_463_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_3));
    add_ln382_2_fu_474_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_4));
    add_ln382_3_fu_485_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_5));
    add_ln382_4_fu_496_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_6));
    add_ln382_5_fu_507_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_7));
    add_ln382_6_fu_518_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_8));
    add_ln382_7_fu_529_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_9));
    add_ln382_fu_452_p2 <= std_logic_vector(unsigned(add_ln368_fu_430_p2) + unsigned(ap_const_lv7_2));
    and_ln375_fu_641_p2 <= (or_ln375_fu_635_p2 and grp_fu_354_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage7 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage8 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage9 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state28 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln372_reg_917)
    begin
        if ((icmp_ln372_reg_917 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvars_iv7_phi_fu_339_p4_assign_proc : process(indvars_iv7_reg_335, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage3, icmp_ln372_reg_917_pp1_iter1_reg, add_ln372_1_reg_953, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (icmp_ln372_reg_917_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvars_iv7_phi_fu_339_p4 <= add_ln372_1_reg_953;
        else 
            ap_phi_mux_indvars_iv7_phi_fu_339_p4 <= indvars_iv7_reg_335;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_327_p4_assign_proc : process(j_reg_323, icmp_ln372_reg_917, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, add_ln372_reg_933, ap_block_pp1_stage0)
    begin
        if (((icmp_ln372_reg_917 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_phi_fu_327_p4 <= add_ln372_reg_933;
        else 
            ap_phi_mux_j_phi_fu_327_p4 <= j_reg_323;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln375_fu_606_p1 <= tempFlatten_reg_926;

    dense_address0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0, ap_block_pp1_stage3, zext_ln381_3_fu_601_p1, zext_ln381_5_fu_667_p1, ap_block_pp1_stage4, zext_ln381_7_fu_690_p1, ap_block_pp1_stage5, zext_ln381_9_fu_709_p1, ap_block_pp1_stage6, zext_ln381_11_fu_728_p1, ap_block_pp1_stage7, zext_ln381_13_fu_747_p1, ap_block_pp1_stage8, zext_ln381_15_fu_766_p1, ap_block_pp1_stage9, zext_ln381_17_fu_785_p1, zext_ln381_19_fu_804_p1, ap_block_pp1_stage1, zext_ln381_21_fu_823_p1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            dense_address0 <= zext_ln381_21_fu_823_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            dense_address0 <= zext_ln381_19_fu_804_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            dense_address0 <= zext_ln381_17_fu_785_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9))) then 
            dense_address0 <= zext_ln381_15_fu_766_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) then 
            dense_address0 <= zext_ln381_13_fu_747_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7))) then 
            dense_address0 <= zext_ln381_11_fu_728_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6))) then 
            dense_address0 <= zext_ln381_9_fu_709_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then 
            dense_address0 <= zext_ln381_7_fu_690_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4))) then 
            dense_address0 <= zext_ln381_5_fu_667_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            dense_address0 <= zext_ln381_3_fu_601_p1(13 - 1 downto 0);
        else 
            dense_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_ce0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)))) then 
            dense_ce0 <= ap_const_logic_1;
        else 
            dense_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_346_p0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, result_load_reg_979, result_load_1_reg_989, result_load_2_reg_999, result_load_3_reg_1009, result_load_4_reg_1019, result_load_5_reg_1029, result_load_6_reg_1044, result_load_7_reg_1059, result_load_8_reg_1069, result_load_9_reg_1074, ap_block_pp1_stage0, ap_block_pp1_stage3, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_9_reg_1074;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_8_reg_1069;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_7_reg_1059;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_6_reg_1044;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_5_reg_1029;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_4_reg_1019;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_3_reg_1009;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_2_reg_999;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_346_p0 <= result_load_1_reg_989;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9))) then 
            grp_fu_346_p0 <= result_load_reg_979;
        else 
            grp_fu_346_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_346_p1_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, reg_379, ap_CS_fsm_pp1_stage3, reg_384, reg_389, reg_394, reg_399, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0, ap_block_pp1_stage3, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_399;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_394;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_389;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_384;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_346_p1 <= reg_379;
        else 
            grp_fu_346_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, tempFlatten_reg_926, tempFlatten_reg_926_pp1_iter1_reg, ap_block_pp1_stage0, ap_block_pp1_stage3, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_350_p0 <= tempFlatten_reg_926_pp1_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_350_p0 <= tempFlatten_reg_926;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(reg_359, ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, reg_364, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, reg_369, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, reg_374, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, dense_load_8_reg_1049, dense_load_9_reg_1064, ap_block_pp1_stage0, ap_block_pp1_stage3, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_350_p1 <= dense_load_9_reg_1064;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            grp_fu_350_p1 <= dense_load_8_reg_1049;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)))) then 
            grp_fu_350_p1 <= reg_374;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)))) then 
            grp_fu_350_p1 <= reg_369;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            grp_fu_350_p1 <= reg_364;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)))) then 
            grp_fu_350_p1 <= reg_359;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln367_fu_546_p2 <= "1" when (i_reg_312 = ap_const_lv4_A) else "0";
    icmp_ln372_fu_575_p2 <= "1" when (ap_phi_mux_j_phi_fu_327_p4 = ap_const_lv6_31) else "0";
    icmp_ln375_1_fu_629_p2 <= "1" when (trunc_ln375_fu_619_p1 = ap_const_lv23_0) else "0";
    icmp_ln375_fu_623_p2 <= "0" when (tmp_fu_609_p4 = ap_const_lv8_FF) else "1";
    mul_ln381_fu_569_p0 <= mul_ln381_fu_569_p00(4 - 1 downto 0);
    mul_ln381_fu_569_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nKernel),13));
    mul_ln381_fu_569_p1 <= ap_const_lv13_1EA(10 - 1 downto 0);
    or_ln375_fu_635_p2 <= (icmp_ln375_fu_623_p2 or icmp_ln375_1_fu_629_p2);
    or_ln379_fu_647_p2 <= (ap_phi_mux_indvars_iv7_phi_fu_339_p4 or ap_const_lv9_1);
    or_ln382_fu_441_p2 <= (ap_const_lv7_1 or add_ln368_fu_430_p2);

    result_address0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, result_addr_1_reg_837, result_addr_2_reg_843, result_addr_3_reg_849, result_addr_4_reg_855, result_addr_5_reg_861, result_addr_7_reg_872, result_addr_8_reg_877, result_addr_9_reg_883, result_addr_10_reg_889, ap_CS_fsm_state2, ap_block_pp1_stage0, ap_block_pp1_stage3, zext_ln368_2_fu_561_p1, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address0 <= result_addr_10_reg_889;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address0 <= result_addr_9_reg_883;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address0 <= result_addr_8_reg_877;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            result_address0 <= result_addr_7_reg_872;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9))) then 
            result_address0 <= result_addr_5_reg_861;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8))) then 
            result_address0 <= result_addr_4_reg_855;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7))) then 
            result_address0 <= result_addr_3_reg_849;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6))) then 
            result_address0 <= result_addr_2_reg_843;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5))) then 
            result_address0 <= result_addr_1_reg_837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_address0 <= zext_ln368_2_fu_561_p1(7 - 1 downto 0);
        else 
            result_address0 <= "XXXXXXX";
        end if; 
    end process;


    result_address1_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_CS_fsm_pp1_stage8, ap_CS_fsm_pp1_stage5, ap_CS_fsm_pp1_stage9, ap_CS_fsm_pp1_stage6, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage3, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter2, result_addr_1_reg_837, result_addr_2_reg_843, result_addr_3_reg_849, result_addr_4_reg_855, result_addr_5_reg_861, result_addr_6_reg_867, result_addr_8_reg_877, result_addr_9_reg_883, result_addr_10_reg_889, ap_block_pp1_stage0, ap_block_pp1_stage3, ap_block_pp1_stage4, ap_block_pp1_stage5, ap_block_pp1_stage6, ap_block_pp1_stage7, ap_block_pp1_stage8, ap_block_pp1_stage9, ap_block_pp1_stage1, ap_block_pp1_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            result_address1 <= result_addr_10_reg_889;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
            result_address1 <= result_addr_9_reg_883;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            result_address1 <= result_addr_8_reg_877;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address1 <= result_addr_5_reg_861;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address1 <= result_addr_4_reg_855;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address1 <= result_addr_3_reg_849;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address1 <= result_addr_2_reg_843;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            result_address1 <= result_addr_1_reg_837;
        elsif ((((ap_const_boolean_0 = ap_block_pp1_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            result_address1 <= result_addr_6_reg_867;
        else 
            result_address1 <= "XXXXXXX";
        end if; 
    end process;


    result_ce0_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, reg_404, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            result_d0 <= reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_d0 <= ap_const_lv32_0;
        else 
            result_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    result_d1 <= reg_404;

    result_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, and_ln375_reg_943_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, icmp_ln367_fu_546_p2)
    begin
        if ((((icmp_ln367_fu_546_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(ap_CS_fsm_pp1_stage4, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage8, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage6_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage3_11001, and_ln375_reg_943_pp1_iter1_reg, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_lv1_0 = and_ln375_reg_943_pp1_iter1_reg) and (ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tensor_address0 <= zext_ln372_fu_581_p1(6 - 1 downto 0);

    tensor_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tensor_ce0 <= ap_const_logic_1;
        else 
            tensor_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_410_p3 <= (result_offset & ap_const_lv3_0);
    tmp_3_fu_418_p3 <= (result_offset & ap_const_lv1_0);
    tmp_fu_609_p4 <= bitcast_ln375_fu_606_p1(30 downto 23);
    trunc_ln375_fu_619_p1 <= bitcast_ln375_fu_606_p1(23 - 1 downto 0);
    zext_ln368_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_312),7));
    zext_ln368_2_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln368_1_fu_556_p2),64));
    zext_ln368_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_418_p3),7));
    zext_ln372_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_phi_fu_327_p4),64));
    zext_ln381_10_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_2_fu_714_p2),13));
    zext_ln381_11_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_4_fu_723_p2),64));
    zext_ln381_12_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_3_fu_733_p2),13));
    zext_ln381_13_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_5_fu_742_p2),64));
    zext_ln381_14_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_4_fu_752_p2),13));
    zext_ln381_15_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_6_fu_761_p2),64));
    zext_ln381_16_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_5_fu_771_p2),13));
    zext_ln381_17_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_7_fu_780_p2),64));
    zext_ln381_18_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_6_fu_790_p2),13));
    zext_ln381_19_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_8_fu_799_p2),64));
    zext_ln381_1_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln379_reg_947),10));
    zext_ln381_20_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_7_fu_809_p2),13));
    zext_ln381_21_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_9_reg_1039),64));
    zext_ln381_2_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_indvars_iv7_phi_fu_339_p4),13));
    zext_ln381_3_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_fu_596_p2),64));
    zext_ln381_4_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln379_reg_947),13));
    zext_ln381_5_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_1_fu_662_p2),64));
    zext_ln381_6_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_fu_675_p2),13));
    zext_ln381_7_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_2_fu_685_p2),64));
    zext_ln381_8_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln379_1_fu_695_p2),13));
    zext_ln381_9_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln381_3_fu_704_p2),64));
    zext_ln382_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln382_fu_441_p2),64));
    zext_ln382_2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_fu_452_p2),64));
    zext_ln382_3_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_1_fu_463_p2),64));
    zext_ln382_4_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_2_fu_474_p2),64));
    zext_ln382_5_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_3_fu_485_p2),64));
    zext_ln382_6_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_4_fu_496_p2),64));
    zext_ln382_7_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_5_fu_507_p2),64));
    zext_ln382_8_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_6_fu_518_p2),64));
    zext_ln382_9_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln382_7_fu_529_p2),64));
    zext_ln382_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln368_fu_430_p2),64));
end behav;
