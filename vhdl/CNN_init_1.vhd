-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_init_1 is
port (
    tensor_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tensor_ce0 : OUT STD_LOGIC;
    tensor_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_we0 : OUT STD_LOGIC;
    tensor_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    tensor_ce1 : OUT STD_LOGIC;
    tensor_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tensor_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    tensor_we1 : OUT STD_LOGIC;
    result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_we0 : OUT STD_LOGIC;
    result_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_we1 : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we0 : OUT STD_LOGIC;
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of CNN_init_1 is 
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal init_result_U0_ap_start : STD_LOGIC;
    signal init_result_U0_ap_done : STD_LOGIC;
    signal init_result_U0_ap_continue : STD_LOGIC;
    signal init_result_U0_ap_idle : STD_LOGIC;
    signal init_result_U0_ap_ready : STD_LOGIC;
    signal init_result_U0_result_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal init_result_U0_result_ce0 : STD_LOGIC;
    signal init_result_U0_result_we0 : STD_LOGIC;
    signal init_result_U0_result_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal init_tensor_1_U0_ap_start : STD_LOGIC;
    signal init_tensor_1_U0_ap_done : STD_LOGIC;
    signal init_tensor_1_U0_ap_continue : STD_LOGIC;
    signal init_tensor_1_U0_ap_idle : STD_LOGIC;
    signal init_tensor_1_U0_ap_ready : STD_LOGIC;
    signal init_tensor_1_U0_tensor_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal init_tensor_1_U0_tensor_ce0 : STD_LOGIC;
    signal init_tensor_1_U0_tensor_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal init_tensor_1_U0_tensor_ce1 : STD_LOGIC;
    signal init_tensor_1_U0_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal init_tensor_1_U0_input_r_ce0 : STD_LOGIC;
    signal init_tensor_1_U0_input_r_we0 : STD_LOGIC;
    signal init_tensor_1_U0_input_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal init_tensor_1_U0_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal init_tensor_1_U0_input_r_ce1 : STD_LOGIC;
    signal init_tensor_1_U0_input_r_we1 : STD_LOGIC;
    signal init_tensor_1_U0_input_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_init_result_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_init_result_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_init_tensor_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_init_tensor_1_U0_ap_ready : STD_LOGIC;
    signal init_result_U0_start_full_n : STD_LOGIC;
    signal init_result_U0_start_write : STD_LOGIC;
    signal init_tensor_1_U0_start_full_n : STD_LOGIC;
    signal init_tensor_1_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_init_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        result_ce0 : OUT STD_LOGIC;
        result_we0 : OUT STD_LOGIC;
        result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_init_tensor_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce0 : OUT STD_LOGIC;
        tensor_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tensor_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        tensor_ce1 : OUT STD_LOGIC;
        tensor_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_we0 : OUT STD_LOGIC;
        input_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_we1 : OUT STD_LOGIC;
        input_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    init_result_U0 : component CNN_init_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_result_U0_ap_start,
        ap_done => init_result_U0_ap_done,
        ap_continue => init_result_U0_ap_continue,
        ap_idle => init_result_U0_ap_idle,
        ap_ready => init_result_U0_ap_ready,
        result_address0 => init_result_U0_result_address0,
        result_ce0 => init_result_U0_result_ce0,
        result_we0 => init_result_U0_result_we0,
        result_d0 => init_result_U0_result_d0);

    init_tensor_1_U0 : component CNN_init_tensor_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => init_tensor_1_U0_ap_start,
        ap_done => init_tensor_1_U0_ap_done,
        ap_continue => init_tensor_1_U0_ap_continue,
        ap_idle => init_tensor_1_U0_ap_idle,
        ap_ready => init_tensor_1_U0_ap_ready,
        tensor_address0 => init_tensor_1_U0_tensor_address0,
        tensor_ce0 => init_tensor_1_U0_tensor_ce0,
        tensor_q0 => tensor_q0,
        tensor_address1 => init_tensor_1_U0_tensor_address1,
        tensor_ce1 => init_tensor_1_U0_tensor_ce1,
        tensor_q1 => tensor_q1,
        input_r_address0 => init_tensor_1_U0_input_r_address0,
        input_r_ce0 => init_tensor_1_U0_input_r_ce0,
        input_r_we0 => init_tensor_1_U0_input_r_we0,
        input_r_d0 => init_tensor_1_U0_input_r_d0,
        input_r_address1 => init_tensor_1_U0_input_r_address1,
        input_r_ce1 => init_tensor_1_U0_input_r_ce1,
        input_r_we1 => init_tensor_1_U0_input_r_we1,
        input_r_d1 => init_tensor_1_U0_input_r_d1);





    ap_sync_reg_init_result_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_init_result_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_init_result_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_init_result_U0_ap_ready <= ap_sync_init_result_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_init_tensor_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_init_tensor_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_init_tensor_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_init_tensor_1_U0_ap_ready <= ap_sync_init_tensor_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (init_tensor_1_U0_ap_idle and init_result_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (init_tensor_1_U0_ap_done and init_result_U0_ap_done);
    ap_sync_init_result_U0_ap_ready <= (init_result_U0_ap_ready or ap_sync_reg_init_result_U0_ap_ready);
    ap_sync_init_tensor_1_U0_ap_ready <= (init_tensor_1_U0_ap_ready or ap_sync_reg_init_tensor_1_U0_ap_ready);
    ap_sync_ready <= (ap_sync_init_tensor_1_U0_ap_ready and ap_sync_init_result_U0_ap_ready);
    init_result_U0_ap_continue <= ap_sync_continue;
    init_result_U0_ap_start <= ((ap_sync_reg_init_result_U0_ap_ready xor ap_const_logic_1) and ap_start);
    init_result_U0_start_full_n <= ap_const_logic_1;
    init_result_U0_start_write <= ap_const_logic_0;
    init_tensor_1_U0_ap_continue <= ap_sync_continue;
    init_tensor_1_U0_ap_start <= ((ap_sync_reg_init_tensor_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    init_tensor_1_U0_start_full_n <= ap_const_logic_1;
    init_tensor_1_U0_start_write <= ap_const_logic_0;
    input_r_address0 <= init_tensor_1_U0_input_r_address0;
    input_r_address1 <= init_tensor_1_U0_input_r_address1;
    input_r_ce0 <= init_tensor_1_U0_input_r_ce0;
    input_r_ce1 <= init_tensor_1_U0_input_r_ce1;
    input_r_d0 <= init_tensor_1_U0_input_r_d0;
    input_r_d1 <= init_tensor_1_U0_input_r_d1;
    input_r_we0 <= init_tensor_1_U0_input_r_we0;
    input_r_we1 <= init_tensor_1_U0_input_r_we1;
    result_address0 <= init_result_U0_result_address0;
    result_address1 <= ap_const_lv4_0;
    result_ce0 <= init_result_U0_result_ce0;
    result_ce1 <= ap_const_logic_0;
    result_d0 <= init_result_U0_result_d0;
    result_d1 <= ap_const_lv32_0;
    result_we0 <= init_result_U0_result_we0;
    result_we1 <= ap_const_logic_0;
    tensor_address0 <= init_tensor_1_U0_tensor_address0;
    tensor_address1 <= init_tensor_1_U0_tensor_address1;
    tensor_ce0 <= init_tensor_1_U0_tensor_ce0;
    tensor_ce1 <= init_tensor_1_U0_tensor_ce1;
    tensor_d0 <= ap_const_lv32_0;
    tensor_d1 <= ap_const_lv32_0;
    tensor_we0 <= ap_const_logic_0;
    tensor_we1 <= ap_const_logic_0;
end behav;
